package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import HealthKnowledgeDAO.HealthKnowledgeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HEALTH_KNOWLEDGE_TYPE.
*/
public class HealthKnowledgeTypeDao extends AbstractDao<HealthKnowledgeType, Long> {

    public static final String TABLENAME = "HEALTH_KNOWLEDGE_TYPE";

    /**
     * Properties of entity HealthKnowledgeType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Healthknowltypeid = new Property(1, Integer.class, "healthknowltypeid", false, "HEALTHKNOWLTYPEID");
        public final static Property Healthknowltypename = new Property(2, String.class, "healthknowltypename", false, "HEALTHKNOWLTYPENAME");
        public final static Property Classifyexplain = new Property(3, String.class, "classifyexplain", false, "CLASSIFYEXPLAIN");
        public final static Property Healthknowltypecode = new Property(4, Integer.class, "healthknowltypecode", false, "HEALTHKNOWLTYPECODE");
        public final static Property Healthknowltypereamrks = new Property(5, String.class, "healthknowltypereamrks", false, "HEALTHKNOWLTYPEREAMRKS");
    };


    public HealthKnowledgeTypeDao(DaoConfig config) {
        super(config);
    }
    
    public HealthKnowledgeTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HEALTH_KNOWLEDGE_TYPE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'HEALTHKNOWLTYPEID' INTEGER," + // 1: healthknowltypeid
                "'HEALTHKNOWLTYPENAME' TEXT," + // 2: healthknowltypename
                "'CLASSIFYEXPLAIN' TEXT," + // 3: classifyexplain
                "'HEALTHKNOWLTYPECODE' INTEGER," + // 4: healthknowltypecode
                "'HEALTHKNOWLTYPEREAMRKS' TEXT);"); // 5: healthknowltypereamrks
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HEALTH_KNOWLEDGE_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HealthKnowledgeType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer healthknowltypeid = entity.getHealthknowltypeid();
        if (healthknowltypeid != null) {
            stmt.bindLong(2, healthknowltypeid);
        }
 
        String healthknowltypename = entity.getHealthknowltypename();
        if (healthknowltypename != null) {
            stmt.bindString(3, healthknowltypename);
        }
 
        String classifyexplain = entity.getClassifyexplain();
        if (classifyexplain != null) {
            stmt.bindString(4, classifyexplain);
        }
 
        Integer healthknowltypecode = entity.getHealthknowltypecode();
        if (healthknowltypecode != null) {
            stmt.bindLong(5, healthknowltypecode);
        }
 
        String healthknowltypereamrks = entity.getHealthknowltypereamrks();
        if (healthknowltypereamrks != null) {
            stmt.bindString(6, healthknowltypereamrks);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HealthKnowledgeType readEntity(Cursor cursor, int offset) {
        HealthKnowledgeType entity = new HealthKnowledgeType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // healthknowltypeid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // healthknowltypename
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // classifyexplain
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // healthknowltypecode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // healthknowltypereamrks
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HealthKnowledgeType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHealthknowltypeid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setHealthknowltypename(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClassifyexplain(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHealthknowltypecode(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setHealthknowltypereamrks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HealthKnowledgeType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HealthKnowledgeType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
