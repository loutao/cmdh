package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.UserAnswerRecords;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_ANSWER_RECORDS.
*/
public class UserAnswerRecordsDao extends AbstractDao<UserAnswerRecords, Long> {

    public static final String TABLENAME = "USER_ANSWER_RECORDS";

    /**
     * Properties of entity UserAnswerRecords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Issuescoremappid = new Property(1, Integer.class, "issuescoremappid", false, "ISSUESCOREMAPPID");
        public final static Property Temp_identifyissueid = new Property(2, Integer.class, "temp_identifyissueid", false, "TEMP_IDENTIFYISSUEID");
        public final static Property Temp_identifyscoreid = new Property(3, Integer.class, "temp_identifyscoreid", false, "TEMP_IDENTIFYSCOREID");
        public final static Property Temp_userid = new Property(4, Integer.class, "temp_userid", false, "TEMP_USERID");
    };


    public UserAnswerRecordsDao(DaoConfig config) {
        super(config);
    }
    
    public UserAnswerRecordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_ANSWER_RECORDS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ISSUESCOREMAPPID' INTEGER," + // 1: issuescoremappid
                "'TEMP_IDENTIFYISSUEID' INTEGER," + // 2: temp_identifyissueid
                "'TEMP_IDENTIFYSCOREID' INTEGER," + // 3: temp_identifyscoreid
                "'TEMP_USERID' INTEGER);"); // 4: temp_userid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_ANSWER_RECORDS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserAnswerRecords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer issuescoremappid = entity.getIssuescoremappid();
        if (issuescoremappid != null) {
            stmt.bindLong(2, issuescoremappid);
        }
 
        Integer temp_identifyissueid = entity.getTemp_identifyissueid();
        if (temp_identifyissueid != null) {
            stmt.bindLong(3, temp_identifyissueid);
        }
 
        Integer temp_identifyscoreid = entity.getTemp_identifyscoreid();
        if (temp_identifyscoreid != null) {
            stmt.bindLong(4, temp_identifyscoreid);
        }
 
        Integer temp_userid = entity.getTemp_userid();
        if (temp_userid != null) {
            stmt.bindLong(5, temp_userid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserAnswerRecords readEntity(Cursor cursor, int offset) {
        UserAnswerRecords entity = new UserAnswerRecords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // issuescoremappid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // temp_identifyissueid
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // temp_identifyscoreid
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // temp_userid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserAnswerRecords entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIssuescoremappid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTemp_identifyissueid(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTemp_identifyscoreid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTemp_userid(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserAnswerRecords entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserAnswerRecords entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
