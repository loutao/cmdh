package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.UserExerciseFeature;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_EXERCISE_FEATURE.
*/
public class UserExerciseFeatureDao extends AbstractDao<UserExerciseFeature, Long> {

    public static final String TABLENAME = "USER_EXERCISE_FEATURE";

    /**
     * Properties of entity UserExerciseFeature.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Exercisefeatureid = new Property(1, Integer.class, "exercisefeatureid", false, "EXERCISEFEATUREID");
        public final static Property Height = new Property(2, Double.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(3, Double.class, "weight", false, "WEIGHT");
        public final static Property Steplength = new Property(4, Double.class, "steplength", false, "STEPLENGTH");
        public final static Property Runsteplength = new Property(5, Double.class, "runsteplength", false, "RUNSTEPLENGTH");
        public final static Property Standardweight = new Property(6, Double.class, "standardweight", false, "STANDARDWEIGHT");
        public final static Property Datauptime = new Property(7, java.util.Date.class, "datauptime", false, "DATAUPTIME");
        public final static Property Exercisefeatureremarks = new Property(8, String.class, "exercisefeatureremarks", false, "EXERCISEFEATUREREMARKS");
        public final static Property Motilityindex = new Property(9, String.class, "motilityindex", false, "MOTILITYINDEX");
        public final static Property Exercisehabitsdetermine = new Property(10, String.class, "exercisehabitsdetermine", false, "EXERCISEHABITSDETERMINE");
        public final static Property Exercisehabitanalysis = new Property(11, String.class, "exercisehabitanalysis", false, "EXERCISEHABITANALYSIS");
        public final static Property Averageexcitetime = new Property(12, Double.class, "averageexcitetime", false, "AVERAGEEXCITETIME");
        public final static Property Exercisetypeprefer = new Property(13, String.class, "exercisetypeprefer", false, "EXERCISETYPEPREFER");
    };


    public UserExerciseFeatureDao(DaoConfig config) {
        super(config);
    }
    
    public UserExerciseFeatureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_EXERCISE_FEATURE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'EXERCISEFEATUREID' INTEGER," + // 1: exercisefeatureid
                "'HEIGHT' REAL," + // 2: height
                "'WEIGHT' REAL," + // 3: weight
                "'STEPLENGTH' REAL," + // 4: steplength
                "'RUNSTEPLENGTH' REAL," + // 5: runsteplength
                "'STANDARDWEIGHT' REAL," + // 6: standardweight
                "'DATAUPTIME' INTEGER," + // 7: datauptime
                "'EXERCISEFEATUREREMARKS' TEXT," + // 8: exercisefeatureremarks
                "'MOTILITYINDEX' TEXT," + // 9: motilityindex
                "'EXERCISEHABITSDETERMINE' TEXT," + // 10: exercisehabitsdetermine
                "'EXERCISEHABITANALYSIS' TEXT," + // 11: exercisehabitanalysis
                "'AVERAGEEXCITETIME' REAL," + // 12: averageexcitetime
                "'EXERCISETYPEPREFER' TEXT);"); // 13: exercisetypeprefer
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_EXERCISE_FEATURE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserExerciseFeature entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer exercisefeatureid = entity.getExercisefeatureid();
        if (exercisefeatureid != null) {
            stmt.bindLong(2, exercisefeatureid);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(3, height);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(4, weight);
        }
 
        Double steplength = entity.getSteplength();
        if (steplength != null) {
            stmt.bindDouble(5, steplength);
        }
 
        Double runsteplength = entity.getRunsteplength();
        if (runsteplength != null) {
            stmt.bindDouble(6, runsteplength);
        }
 
        Double standardweight = entity.getStandardweight();
        if (standardweight != null) {
            stmt.bindDouble(7, standardweight);
        }
 
        java.util.Date datauptime = entity.getDatauptime();
        if (datauptime != null) {
            stmt.bindLong(8, datauptime.getTime());
        }
 
        String exercisefeatureremarks = entity.getExercisefeatureremarks();
        if (exercisefeatureremarks != null) {
            stmt.bindString(9, exercisefeatureremarks);
        }
 
        String motilityindex = entity.getMotilityindex();
        if (motilityindex != null) {
            stmt.bindString(10, motilityindex);
        }
 
        String exercisehabitsdetermine = entity.getExercisehabitsdetermine();
        if (exercisehabitsdetermine != null) {
            stmt.bindString(11, exercisehabitsdetermine);
        }
 
        String exercisehabitanalysis = entity.getExercisehabitanalysis();
        if (exercisehabitanalysis != null) {
            stmt.bindString(12, exercisehabitanalysis);
        }
 
        Double averageexcitetime = entity.getAverageexcitetime();
        if (averageexcitetime != null) {
            stmt.bindDouble(13, averageexcitetime);
        }
 
        String exercisetypeprefer = entity.getExercisetypeprefer();
        if (exercisetypeprefer != null) {
            stmt.bindString(14, exercisetypeprefer);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserExerciseFeature readEntity(Cursor cursor, int offset) {
        UserExerciseFeature entity = new UserExerciseFeature( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // exercisefeatureid
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // height
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // weight
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // steplength
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // runsteplength
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // standardweight
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // datauptime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // exercisefeatureremarks
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // motilityindex
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // exercisehabitsdetermine
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // exercisehabitanalysis
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // averageexcitetime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // exercisetypeprefer
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserExerciseFeature entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExercisefeatureid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setHeight(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setWeight(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setSteplength(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setRunsteplength(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setStandardweight(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setDatauptime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setExercisefeatureremarks(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMotilityindex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setExercisehabitsdetermine(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setExercisehabitanalysis(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAverageexcitetime(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setExercisetypeprefer(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserExerciseFeature entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserExerciseFeature entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
