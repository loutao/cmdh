package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.HealthSuggestionsMapp;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HEALTH_SUGGESTIONS_MAPP.
*/
public class HealthSuggestionsMappDao extends AbstractDao<HealthSuggestionsMapp, Long> {

    public static final String TABLENAME = "HEALTH_SUGGESTIONS_MAPP";

    /**
     * Properties of entity HealthSuggestionsMapp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Healthsuggestmappid = new Property(1, Integer.class, "healthsuggestmappid", false, "HEALTHSUGGESTMAPPID");
        public final static Property Healthsuggcontent = new Property(2, String.class, "healthsuggcontent", false, "HEALTHSUGGCONTENT");
        public final static Property Temp_userid = new Property(3, Integer.class, "temp_userid", false, "TEMP_USERID");
        public final static Property Temp_healthsuggestid = new Property(4, Integer.class, "temp_healthsuggestid", false, "TEMP_HEALTHSUGGESTID");
        public final static Property Healthsuggestreason = new Property(5, String.class, "healthsuggestreason", false, "HEALTHSUGGESTREASON");
        public final static Property Healthsuggesttime = new Property(6, java.util.Date.class, "healthsuggesttime", false, "HEALTHSUGGESTTIME");
        public final static Property Healthsuggestremarks = new Property(7, String.class, "healthsuggestremarks", false, "HEALTHSUGGESTREMARKS");
    };


    public HealthSuggestionsMappDao(DaoConfig config) {
        super(config);
    }
    
    public HealthSuggestionsMappDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HEALTH_SUGGESTIONS_MAPP' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'HEALTHSUGGESTMAPPID' INTEGER," + // 1: healthsuggestmappid
                "'HEALTHSUGGCONTENT' TEXT," + // 2: healthsuggcontent
                "'TEMP_USERID' INTEGER," + // 3: temp_userid
                "'TEMP_HEALTHSUGGESTID' INTEGER," + // 4: temp_healthsuggestid
                "'HEALTHSUGGESTREASON' TEXT," + // 5: healthsuggestreason
                "'HEALTHSUGGESTTIME' INTEGER," + // 6: healthsuggesttime
                "'HEALTHSUGGESTREMARKS' TEXT);"); // 7: healthsuggestremarks
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HEALTH_SUGGESTIONS_MAPP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HealthSuggestionsMapp entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer healthsuggestmappid = entity.getHealthsuggestmappid();
        if (healthsuggestmappid != null) {
            stmt.bindLong(2, healthsuggestmappid);
        }
 
        String healthsuggcontent = entity.getHealthsuggcontent();
        if (healthsuggcontent != null) {
            stmt.bindString(3, healthsuggcontent);
        }
 
        Integer temp_userid = entity.getTemp_userid();
        if (temp_userid != null) {
            stmt.bindLong(4, temp_userid);
        }
 
        Integer temp_healthsuggestid = entity.getTemp_healthsuggestid();
        if (temp_healthsuggestid != null) {
            stmt.bindLong(5, temp_healthsuggestid);
        }
 
        String healthsuggestreason = entity.getHealthsuggestreason();
        if (healthsuggestreason != null) {
            stmt.bindString(6, healthsuggestreason);
        }
 
        java.util.Date healthsuggesttime = entity.getHealthsuggesttime();
        if (healthsuggesttime != null) {
            stmt.bindLong(7, healthsuggesttime.getTime());
        }
 
        String healthsuggestremarks = entity.getHealthsuggestremarks();
        if (healthsuggestremarks != null) {
            stmt.bindString(8, healthsuggestremarks);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HealthSuggestionsMapp readEntity(Cursor cursor, int offset) {
        HealthSuggestionsMapp entity = new HealthSuggestionsMapp( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // healthsuggestmappid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // healthsuggcontent
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // temp_userid
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // temp_healthsuggestid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // healthsuggestreason
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // healthsuggesttime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // healthsuggestremarks
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HealthSuggestionsMapp entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHealthsuggestmappid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setHealthsuggcontent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTemp_userid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTemp_healthsuggestid(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setHealthsuggestreason(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHealthsuggesttime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setHealthsuggestremarks(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HealthSuggestionsMapp entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HealthSuggestionsMapp entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
