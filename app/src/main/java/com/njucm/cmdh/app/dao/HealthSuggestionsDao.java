package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.HealthSuggestions;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table HEALTH_SUGGESTIONS.
 */
public class HealthSuggestionsDao extends AbstractDao<HealthSuggestions, Long> {

    public static final String TABLENAME = "HEALTH_SUGGESTIONS";

    /**
     * Properties of entity HealthSuggestions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Healthsuggestid = new Property(1, Integer.class, "healthsuggestid", false, "HEALTHSUGGESTID");
        public final static Property Healthsuggestcontent = new Property(2, String.class, "healthsuggestcontent", false, "HEALTHSUGGESTCONTENT");
        public final static Property Healthsuggesttitle = new Property(3, String.class, "healthsuggesttitle", false, "HEALTHSUGGESTTITLE");
        public final static Property Healthsuggestremarks = new Property(4, String.class, "healthsuggestremarks", false, "HEALTHSUGGESTREMARKS");
        public final static Property Temp_healthsuggtypeid = new Property(5, Integer.class, "temp_healthsuggtypeid", false, "TEMP_HEALTHSUGGTYPEID");
        public final static Property Healthsuggestflag = new Property(6, Integer.class, "healthsuggestflag", false, "HEALTHSUGGESTFLAG");
        public final static Property Healthsuggestcode = new Property(7, Integer.class, "healthsuggestcode", false, "HEALTHSUGGESTCODE");
    }

    ;


    public HealthSuggestionsDao(DaoConfig config) {
        super(config);
    }

    public HealthSuggestionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'HEALTH_SUGGESTIONS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'HEALTHSUGGESTID' INTEGER," + // 1: healthsuggestid
                "'HEALTHSUGGESTCONTENT' TEXT," + // 2: healthsuggestcontent
                "'HEALTHSUGGESTTITLE' TEXT," + // 3: healthsuggesttitle
                "'HEALTHSUGGESTREMARKS' TEXT," + // 4: healthsuggestremarks
                "'TEMP_HEALTHSUGGTYPEID' INTEGER," + // 5: temp_healthsuggtypeid
                "'HEALTHSUGGESTFLAG' INTEGER," + // 6: healthsuggestflag
                "'HEALTHSUGGESTCODE' INTEGER);"); // 7: healthsuggestcode
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HEALTH_SUGGESTIONS'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, HealthSuggestions entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer healthsuggestid = entity.getHealthsuggestid();
        if (healthsuggestid != null) {
            stmt.bindLong(2, healthsuggestid);
        }

        String healthsuggestcontent = entity.getHealthsuggestcontent();
        if (healthsuggestcontent != null) {
            stmt.bindString(3, healthsuggestcontent);
        }

        String healthsuggesttitle = entity.getHealthsuggesttitle();
        if (healthsuggesttitle != null) {
            stmt.bindString(4, healthsuggesttitle);
        }

        String healthsuggestremarks = entity.getHealthsuggestremarks();
        if (healthsuggestremarks != null) {
            stmt.bindString(5, healthsuggestremarks);
        }

        String temp_healthsuggtypeid = entity.getTemp_healthsuggtypeid();
        if (temp_healthsuggtypeid != null) {
            stmt.bindString(6, temp_healthsuggtypeid);
        }

        Integer healthsuggestflag = entity.getHealthsuggestflag();
        if (healthsuggestflag != null) {
            stmt.bindLong(7, healthsuggestflag);
        }

        Integer healthsuggestcode = entity.getHealthsuggestcode();
        if (healthsuggestcode != null) {
            stmt.bindLong(8, healthsuggestcode);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public HealthSuggestions readEntity(Cursor cursor, int offset) {
        HealthSuggestions entity = new HealthSuggestions( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // healthsuggestid
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // healthsuggestcontent
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // healthsuggesttitle
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // healthsuggestremarks
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // temp_healthsuggtypeid
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // healthsuggestflag
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // healthsuggestcode
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, HealthSuggestions entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHealthsuggestid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setHealthsuggestcontent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHealthsuggesttitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHealthsuggestremarks(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTemp_healthsuggtypeid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHealthsuggestflag(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHealthsuggestcode(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(HealthSuggestions entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(HealthSuggestions entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
