package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.HealthSuggestionCombileSimplify;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HEALTH_SUGGESTION_COMBILE_SIMPLIFY.
*/
public class HealthSuggestionCombileSimplifyDao extends AbstractDao<HealthSuggestionCombileSimplify, Long> {

    public static final String TABLENAME = "HEALTH_SUGGESTION_COMBILE_SIMPLIFY";

    /**
     * Properties of entity HealthSuggestionCombileSimplify.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Recommendedconditionsmappid = new Property(1, Integer.class, "recommendedconditionsmappid", false, "RECOMMENDEDCONDITIONSMAPPID");
        public final static Property Temp_healthsuggestlimitedid = new Property(2, String.class, "temp_healthsuggestlimitedid", false, "TEMP_HEALTHSUGGESTLIMITEDID");
        public final static Property Healthsuggestcontent = new Property(3, String.class, "healthsuggestcontent", false, "HEALTHSUGGESTCONTENT");
        public final static Property Healthsuggesttitle = new Property(4, String.class, "healthsuggesttitle", false, "HEALTHSUGGESTTITLE");
        public final static Property Healthsuggestremarks = new Property(5, String.class, "healthsuggestremarks", false, "HEALTHSUGGESTREMARKS");
        public final static Property Temp_healthsuggtypeid = new Property(6, String.class, "temp_healthsuggtypeid", false, "TEMP_HEALTHSUGGTYPEID");
        public final static Property Healthknowltypeid = new Property(7, String.class, "healthknowltypeid", false, "HEALTHKNOWLTYPEID");
        public final static Property Healthsuggestflag = new Property(8, Integer.class, "healthsuggestflag", false, "HEALTHSUGGESTFLAG");
        public final static Property Healthsuggestcode = new Property(9, Integer.class, "healthsuggestcode", false, "HEALTHSUGGESTCODE");
        public final static Property Originalpicturepath = new Property(10, String.class, "originalpicturepath", false, "ORIGINALPICTUREPATH");
        public final static Property Picturename = new Property(11, String.class, "picturename", false, "PICTURENAME");
        public final static Property IsCollected = new Property(12, Boolean.class, "isCollected", false, "IS_COLLECTED");
    };


    public HealthSuggestionCombileSimplifyDao(DaoConfig config) {
        super(config);
    }
    
    public HealthSuggestionCombileSimplifyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HEALTH_SUGGESTION_COMBILE_SIMPLIFY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'RECOMMENDEDCONDITIONSMAPPID' INTEGER," + // 1: recommendedconditionsmappid
                "'TEMP_HEALTHSUGGESTLIMITEDID' TEXT," + // 2: temp_healthsuggestlimitedid
                "'HEALTHSUGGESTCONTENT' TEXT," + // 3: healthsuggestcontent
                "'HEALTHSUGGESTTITLE' TEXT," + // 4: healthsuggesttitle
                "'HEALTHSUGGESTREMARKS' TEXT," + // 5: healthsuggestremarks
                "'TEMP_HEALTHSUGGTYPEID' TEXT," + // 6: temp_healthsuggtypeid
                "'HEALTHKNOWLTYPEID' TEXT," + // 7: healthknowltypeid
                "'HEALTHSUGGESTFLAG' INTEGER," + // 8: healthsuggestflag
                "'HEALTHSUGGESTCODE' INTEGER," + // 9: healthsuggestcode
                "'ORIGINALPICTUREPATH' TEXT," + // 10: originalpicturepath
                "'PICTURENAME' TEXT," + // 11: picturename
                "'IS_COLLECTED' INTEGER);"); // 12: isCollected
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HEALTH_SUGGESTION_COMBILE_SIMPLIFY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HealthSuggestionCombileSimplify entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer recommendedconditionsmappid = entity.getRecommendedconditionsmappid();
        if (recommendedconditionsmappid != null) {
            stmt.bindLong(2, recommendedconditionsmappid);
        }
 
        String temp_healthsuggestlimitedid = entity.getTemp_healthsuggestlimitedid();
        if (temp_healthsuggestlimitedid != null) {
            stmt.bindString(3, temp_healthsuggestlimitedid);
        }
 
        String healthsuggestcontent = entity.getHealthsuggestcontent();
        if (healthsuggestcontent != null) {
            stmt.bindString(4, healthsuggestcontent);
        }
 
        String healthsuggesttitle = entity.getHealthsuggesttitle();
        if (healthsuggesttitle != null) {
            stmt.bindString(5, healthsuggesttitle);
        }
 
        String healthsuggestremarks = entity.getHealthsuggestremarks();
        if (healthsuggestremarks != null) {
            stmt.bindString(6, healthsuggestremarks);
        }
 
        String temp_healthsuggtypeid = entity.getTemp_healthsuggtypeid();
        if (temp_healthsuggtypeid != null) {
            stmt.bindString(7, temp_healthsuggtypeid);
        }
 
        String healthknowltypeid = entity.getHealthknowltypeid();
        if (healthknowltypeid != null) {
            stmt.bindString(8, healthknowltypeid);
        }
 
        Integer healthsuggestflag = entity.getHealthsuggestflag();
        if (healthsuggestflag != null) {
            stmt.bindLong(9, healthsuggestflag);
        }
 
        Integer healthsuggestcode = entity.getHealthsuggestcode();
        if (healthsuggestcode != null) {
            stmt.bindLong(10, healthsuggestcode);
        }
 
        String originalpicturepath = entity.getOriginalpicturepath();
        if (originalpicturepath != null) {
            stmt.bindString(11, originalpicturepath);
        }
 
        String picturename = entity.getPicturename();
        if (picturename != null) {
            stmt.bindString(12, picturename);
        }
 
        Boolean isCollected = entity.getIsCollected();
        if (isCollected != null) {
            stmt.bindLong(13, isCollected ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HealthSuggestionCombileSimplify readEntity(Cursor cursor, int offset) {
        HealthSuggestionCombileSimplify entity = new HealthSuggestionCombileSimplify( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // recommendedconditionsmappid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // temp_healthsuggestlimitedid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // healthsuggestcontent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // healthsuggesttitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // healthsuggestremarks
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // temp_healthsuggtypeid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // healthknowltypeid
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // healthsuggestflag
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // healthsuggestcode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // originalpicturepath
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // picturename
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0 // isCollected
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HealthSuggestionCombileSimplify entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecommendedconditionsmappid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTemp_healthsuggestlimitedid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHealthsuggestcontent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHealthsuggesttitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHealthsuggestremarks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTemp_healthsuggtypeid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHealthknowltypeid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHealthsuggestflag(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setHealthsuggestcode(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOriginalpicturepath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPicturename(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsCollected(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HealthSuggestionCombileSimplify entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HealthSuggestionCombileSimplify entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
