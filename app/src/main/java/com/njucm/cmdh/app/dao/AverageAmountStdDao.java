package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.AverageAmountStd;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AVERAGE_AMOUNT_STD.
*/
public class AverageAmountStdDao extends AbstractDao<AverageAmountStd, Long> {

    public static final String TABLENAME = "AVERAGE_AMOUNT_STD";

    /**
     * Properties of entity AverageAmountStd.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Amountnumofdays = new Property(1, Integer.class, "amountnumofdays", false, "AMOUNTNUMOFDAYS");
        public final static Property Averageamountremarks = new Property(2, String.class, "averageamountremarks", false, "AVERAGEAMOUNTREMARKS");
        public final static Property Amountstoptime = new Property(3, java.util.Date.class, "amountstoptime", false, "AMOUNTSTOPTIME");
    };


    public AverageAmountStdDao(DaoConfig config) {
        super(config);
    }
    
    public AverageAmountStdDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AVERAGE_AMOUNT_STD' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'AMOUNTNUMOFDAYS' INTEGER," + // 1: amountnumofdays
                "'AVERAGEAMOUNTREMARKS' TEXT," + // 2: averageamountremarks
                "'AMOUNTSTOPTIME' INTEGER);"); // 3: amountstoptime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AVERAGE_AMOUNT_STD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AverageAmountStd entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer amountnumofdays = entity.getAmountnumofdays();
        if (amountnumofdays != null) {
            stmt.bindLong(2, amountnumofdays);
        }
 
        String averageamountremarks = entity.getAverageamountremarks();
        if (averageamountremarks != null) {
            stmt.bindString(3, averageamountremarks);
        }
 
        java.util.Date amountstoptime = entity.getAmountstoptime();
        if (amountstoptime != null) {
            stmt.bindLong(4, amountstoptime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AverageAmountStd readEntity(Cursor cursor, int offset) {
        AverageAmountStd entity = new AverageAmountStd( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // amountnumofdays
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // averageamountremarks
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // amountstoptime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AverageAmountStd entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAmountnumofdays(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAverageamountremarks(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAmountstoptime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AverageAmountStd entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AverageAmountStd entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
