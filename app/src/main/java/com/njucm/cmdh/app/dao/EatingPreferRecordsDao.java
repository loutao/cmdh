package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.EatingPreferRecords;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EATING_PREFER_RECORDS.
*/
public class EatingPreferRecordsDao extends AbstractDao<EatingPreferRecords, Long> {

    public static final String TABLENAME = "EATING_PREFER_RECORDS";

    /**
     * Properties of entity EatingPreferRecords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Eatingpreferid = new Property(1, Integer.class, "eatingpreferid", false, "EATINGPREFERID");
        public final static Property Foodtypename = new Property(2, String.class, "foodtypename", false, "FOODTYPENAME");
        public final static Property Foodname = new Property(3, String.class, "foodname", false, "FOODNAME");
        public final static Property Preference = new Property(4, Double.class, "preference", false, "PREFERENCE");
        public final static Property Averageintake = new Property(5, Double.class, "averageintake", false, "AVERAGEINTAKE");
        public final static Property Temp_foodnutritionid = new Property(6, Integer.class, "temp_foodnutritionid", false, "TEMP_FOODNUTRITIONID");
        public final static Property Temp_userid = new Property(7, String.class, "temp_userid", false, "TEMP_USERID");
        public final static Property Eatingoftenstarttime = new Property(8, String.class, "eatingoftenstarttime", false, "EATINGOFTENSTARTTIME");
        public final static Property Eatingoftenovertime = new Property(9, String.class, "eatingoftenovertime", false, "EATINGOFTENOVERTIME");
        public final static Property Temp_locationinfoid = new Property(10, Integer.class, "temp_locationinfoid", false, "TEMP_LOCATIONINFOID");
        public final static Property Additemtime = new Property(11, String.class, "additemtime", false, "ADDITEMTIME");
        public final static Property Currentlypreferflag = new Property(12, Integer.class, "currentlypreferflag", false, "CURRENTLYPREFERFLAG");

    };


    public EatingPreferRecordsDao(DaoConfig config) {
        super(config);
    }
    
    public EatingPreferRecordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EATING_PREFER_RECORDS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'EATINGPREFERID' INTEGER," + // 1: eatingpreferid
                "'FOODTYPENAME' TEXT," + // 2: foodtypename
                "'FOODNAME' TEXT," + // 3: foodname
                "'PREFERENCE' REAL," + // 4: preference
                "'AVERAGEINTAKE' REAL," + // 5: averageintake
                "'TEMP_FOODNUTRITIONID' INTEGER," + // 6: temp_foodnutritionid
                "'TEMP_USERID' TEXT," + // 7: temp_userid
                "'EATINGOFTENSTARTTIME' INTEGER," + // 8: eatingoftenstarttime
                "'EATINGOFTENOVERTIME' INTEGER," + // 9: eatingoftenovertime
                "'TEMP_LOCATIONINFOID' INTEGER," +  // 10: temp_locationinfoid
                "'ADDITEMTIME' TEXT," +
                "'CURRENTLYPREFERFLAG' INTEGER);");

    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EATING_PREFER_RECORDS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EatingPreferRecords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer eatingpreferid = entity.getEatingpreferid();
        if (eatingpreferid != null) {
            stmt.bindLong(2, eatingpreferid);
        }
 
        String foodtypename = entity.getFoodtypename();
        if (foodtypename != null) {
            stmt.bindString(3, foodtypename);
        }
 
        String foodname = entity.getFoodname();
        if (foodname != null) {
            stmt.bindString(4, foodname);
        }
 
        Double preference = entity.getPreference();
        if (preference != null) {
            stmt.bindDouble(5, preference);
        }
 
        Double averageintake = entity.getAverageintake();
        if (averageintake != null) {
            stmt.bindDouble(6, averageintake);
        }
 
        Integer temp_foodnutritionid = entity.getTemp_foodnutritionid();
        if (temp_foodnutritionid != null) {
            stmt.bindLong(7, temp_foodnutritionid);
        }
 
        String temp_userid = entity.getTemp_userid();
        if (temp_userid != null) {
            stmt.bindString(8, temp_userid);
        }
 
        String eatingoftenstarttime = entity.getEatingoftenstarttime();
        if (eatingoftenstarttime != null) {
            stmt.bindString(9, eatingoftenstarttime);
        }
 
        String eatingoftenovertime = entity.getEatingoftenovertime();
        if (eatingoftenovertime != null) {
            stmt.bindString(10, eatingoftenovertime);
        }
 
        Integer temp_locationinfoid = entity.getTemp_locationinfoid();
        if (temp_locationinfoid != null) {
            stmt.bindLong(11, temp_locationinfoid);
        }
        String additemtime = entity.getAdditemtime();
        if(additemtime != null){
            stmt.bindString(12,additemtime);
        }
        Integer currentlypreferflag = entity.getCurrentlypreferflag();
        if(currentlypreferflag !=null){
            stmt.bindLong(13,currentlypreferflag);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EatingPreferRecords readEntity(Cursor cursor, int offset) {
        EatingPreferRecords entity = new EatingPreferRecords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // eatingpreferid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // foodtypename
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // foodname
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // preference
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // averageintake
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // temp_foodnutritionid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // temp_userid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // eatingoftenstarttime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // eatingoftenovertime
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // temp_locationinfoid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), //
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) //
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EatingPreferRecords entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEatingpreferid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFoodtypename(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFoodname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPreference(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setAverageintake(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setTemp_foodnutritionid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTemp_userid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEatingoftenstarttime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEatingoftenovertime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTemp_locationinfoid(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setAdditemtime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCurrentlypreferflag(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));

    }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EatingPreferRecords entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EatingPreferRecords entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
