package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.DietaryRecords;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DIETARY_RECORDS.
*/
public class DietaryRecordsDao extends AbstractDao<DietaryRecords, Long> {

    public static final String TABLENAME = "DIETARY_RECORDS";

    /**
     * Properties of entity DietaryRecords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Eatingrecordid = new Property(1, Integer.class, "eatingrecordid", false, "EATINGRECORDID");
        public final static Property Foodtypename = new Property(2, String.class, "foodtypename", false, "FOODTYPENAME");
        public final static Property Foodname  = new Property(3, String.class, "foodname ", false, "FOODNAME ");
        public final static Property Eatingamount = new Property(4, Double.class, "eatingamount", false, "EATINGAMOUNT");
        public final static Property Unitname = new Property(5, String.class, "unitname", false, "UNITNAME");
        public final static Property Eatingtime = new Property(6, String.class, "eatingtime", false, "EATINGTIME");
        public final static Property Eatingrecordsuptime = new Property(7, String.class, "eatingrecordsuptime", false, "EATINGRECORDSUPTIME");
        public final static Property Eatinginforemarks = new Property(8, String.class, "eatinginforemarks", false, "EATINGINFOREMARKS");
        public final static Property Temp_userid = new Property(9, String.class, "temp_userid", false, "TEMP_USERID");
        public final static Property Eatingstateback = new Property(10, String.class, "eatingstateback", false, "EATINGSTATEBACK");
        public final static Property Temp_foodnutritionid = new Property(11, Integer.class, "temp_foodnutritionid", false, "TEMP_FOODNUTRITIONID");
        public final static Property Temp_locationinfoid = new Property(12, Integer.class, "temp_locationinfoid", false, "TEMP_LOCATIONINFOID");
        public final static Property Temp_intelligentdeviceid = new Property(13, Integer.class, "temp_intelligentdeviceid", false, "TEMP_INTELLIGENTDEVICEID");
        public final static Property Intelligentdevicecode = new Property(14, Integer.class, "intelligentdevicecode", false, "INTELLIGENTDEVICECODE");
        public final static Property Eatingupflag = new Property(15, Integer.class, "eatingupflag", false, "EATINGUPFLAG");
        public final static Property Setmealcode = new Property(16, Integer.class, "setmealcode", false, "SETMEALCODE");
        public final static Property Eatingovertime = new Property(17,String.class,"eatingovertime",false,"EATINGOVERTIME");
    };


    public DietaryRecordsDao(DaoConfig config) {
        super(config);
    }
    
    public DietaryRecordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DIETARY_RECORDS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'EATINGRECORDID' INTEGER," + // 1: eatingrecordid
                "'FOODTYPENAME' TEXT," + // 2: foodtypename
                "'FOODNAME ' TEXT," + // 3: foodname 
                "'EATINGAMOUNT' REAL," + // 4: eatingamount
                "'UNITNAME' TEXT," + // 5: unitname
                "'EATINGTIME' TEXT," + // 6: eatingtime
                "'EATINGRECORDSUPTIME' TEXT," + // 7: eatingrecordsuptime
                "'EATINGINFOREMARKS' TEXT," + // 8: eatinginforemarks
                "'TEMP_USERID' TEXT," + // 9: temp_userid
                "'EATINGSTATEBACK' TEXT," + // 10: eatingstateback
                "'TEMP_FOODNUTRITIONID' INTEGER," + // 11: temp_foodnutritionid
                "'TEMP_LOCATIONINFOID' INTEGER," + // 12: temp_locationinfoid
                "'TEMP_INTELLIGENTDEVICEID' INTEGER," + // 13: temp_intelligentdeviceid
                "'INTELLIGENTDEVICECODE' INTEGER," + // 14: intelligentdevicecode
                "'EATINGUPFLAG' INTEGER," + // 15: eatingupflag
                "'SETMEALCODE' INTEGER," +// 16: setmealcode
                "'EATINGOVERTIME' TEXT);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DIETARY_RECORDS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DietaryRecords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer eatingrecordid = entity.getEatingrecordid();
        if (eatingrecordid != null) {
            stmt.bindLong(2, eatingrecordid);
        }
 
        String foodtypename = entity.getFoodtypename();
        if (foodtypename != null) {
            stmt.bindString(3, foodtypename);
        }
 
        String foodname  = entity.getFoodname ();
        if (foodname  != null) {
            stmt.bindString(4, foodname );
        }
 
        Double eatingamount = entity.getEatingamount();
        if (eatingamount != null) {
            stmt.bindDouble(5, eatingamount);
        }
 
        String unitname = entity.getUnitname();
        if (unitname != null) {
            stmt.bindString(6, unitname);
        }
 
        String eatingtime = entity.getEatingtime();
        if (eatingtime != null) {
            stmt.bindString(7, eatingtime);
        }

        String eatingrecordsuptime = entity.getEatingrecordsuptime();
        if (eatingrecordsuptime != null) {
            stmt.bindString(8, eatingrecordsuptime);
        }
 
        String eatinginforemarks = entity.getEatinginforemarks();
        if (eatinginforemarks != null) {
            stmt.bindString(9, eatinginforemarks);
        }
 
        String temp_userid = entity.getTemp_userid();
        if (temp_userid != null) {
            stmt.bindString(10, temp_userid);
        }
 
        String eatingstateback = entity.getEatingstateback();
        if (eatingstateback != null) {
            stmt.bindString(11, eatingstateback);
        }
 
        Integer temp_foodnutritionid = entity.getTemp_foodnutritionid();
        if (temp_foodnutritionid != null) {
            stmt.bindLong(12, temp_foodnutritionid);
        }
 
        Integer temp_locationinfoid = entity.getTemp_locationinfoid();
        if (temp_locationinfoid != null) {
            stmt.bindLong(13, temp_locationinfoid);
        }
 
        Integer temp_intelligentdeviceid = entity.getTemp_intelligentdeviceid();
        if (temp_intelligentdeviceid != null) {
            stmt.bindLong(14, temp_intelligentdeviceid);
        }
 
        Integer intelligentdevicecode = entity.getIntelligentdevicecode();
        if (intelligentdevicecode != null) {
            stmt.bindLong(15, intelligentdevicecode);
        }
 
        Integer eatingupflag = entity.getEatingupflag();
        if (eatingupflag != null) {
            stmt.bindLong(16, eatingupflag);
        }
 
        Integer setmealcode = entity.getSetmealcode();
        if (setmealcode != null) {
            stmt.bindLong(17, setmealcode);
        }
        String eatingovertime = entity.getEatingovertime();
        if(eatingovertime!= null){
            stmt.bindString(18,eatingovertime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DietaryRecords readEntity(Cursor cursor, int offset) {
        DietaryRecords entity = new DietaryRecords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // eatingrecordid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // foodtypename
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // foodname 
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // eatingamount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unitname
            cursor.isNull(offset + 6) ? null :cursor.getString(offset + 6), // eatingtime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // eatingrecordsuptime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // eatinginforemarks
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // temp_userid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // eatingstateback
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // temp_foodnutritionid
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // temp_locationinfoid
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // temp_intelligentdeviceid
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // intelligentdevicecode
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // eatingupflag
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // setmealcode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // setmealcode

        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DietaryRecords entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEatingrecordid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFoodtypename(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFoodname (cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEatingamount(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setUnitname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEatingtime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEatingrecordsuptime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEatinginforemarks(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTemp_userid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEatingstateback(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTemp_foodnutritionid(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setTemp_locationinfoid(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setTemp_intelligentdeviceid(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setIntelligentdevicecode(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setEatingupflag(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setSetmealcode(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setEatingovertime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DietaryRecords entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DietaryRecords entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
