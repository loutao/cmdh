package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.User;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table USER.
 */
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Userid = new Property(1, Integer.class, "userid", false, "USERID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Usersex = new Property(3, String.class, "usersex", false, "USERSEX");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Userage = new Property(6, Integer.class, "userage", false, "USERAGE");
        public final static Property Temp_sleepfeatureid = new Property(7, Integer.class, "temp_sleepfeatureid", false, "TEMP_SLEEPFEATUREID");
        public final static Property Temp_exercisefeatureid = new Property(8, Integer.class, "temp_exercisefeatureid", false, "TEMP_EXERCISEFEATUREID");
        public final static Property Temp_eatingfeatureid = new Property(9, Integer.class, "temp_eatingfeatureid", false, "TEMP_EATINGFEATUREID");
        public final static Property Temp_adminisareaid = new Property(10, Integer.class, "temp_adminisareaid", false, "TEMP_ADMINISAREAID");
    }

    ;


    public UserDao(DaoConfig config) {
        super(config);
    }

    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USERID' INTEGER," + // 1: userid
                "'USERNAME' TEXT," + // 2: username
                "'USERSEX' TEXT," + // 3: usersex
                "'PASSWORD' TEXT," + // 4: userpasswd
                "'EMAIL' TEXT," + // 4: userpasswd
                "'USERAGE' INTEGER," + // 4: userage
                "'TEMP_SLEEPFEATUREID' INTEGER," + // 5: temp_sleepfeatureid
                "'TEMP_EXERCISEFEATUREID' INTEGER," + // 6: temp_exercisefeatureid
                "'TEMP_EATINGFEATUREID' INTEGER," + // 7: temp_eatingfeatureid
                "'TEMP_ADMINISAREAID' INTEGER);"); // 8: temp_adminisareaid
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer userid = entity.getUserid();
        if (userid != null) {
            stmt.bindLong(2, userid);
        }

        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }

        String usersex = entity.getUsersex();
        if (usersex != null) {
            stmt.bindString(4, usersex);
        }
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
        Integer userage = entity.getUserage();
        if (userage != null) {
            stmt.bindLong(7, userage);
        }

        Integer temp_sleepfeatureid = entity.getTemp_sleepfeatureid();
        if (temp_sleepfeatureid != null) {
            stmt.bindLong(8, temp_sleepfeatureid);
        }

        Integer temp_exercisefeatureid = entity.getTemp_exercisefeatureid();
        if (temp_exercisefeatureid != null) {
            stmt.bindLong(9, temp_exercisefeatureid);
        }

        Integer temp_eatingfeatureid = entity.getTemp_eatingfeatureid();
        if (temp_eatingfeatureid != null) {
            stmt.bindLong(10, temp_eatingfeatureid);
        }

        Integer temp_adminisareaid = entity.getTemp_adminisareaid();
        if (temp_adminisareaid != null) {
            stmt.bindLong(11, temp_adminisareaid);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userid
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // usersex
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // usersex
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // usersex
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // userage
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // temp_sleepfeatureid
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // temp_exercisefeatureid
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // temp_eatingfeatureid
                cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // temp_adminisareaid
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsersex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserage(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTemp_sleepfeatureid(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTemp_exercisefeatureid(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTemp_eatingfeatureid(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTemp_adminisareaid(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(User entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
