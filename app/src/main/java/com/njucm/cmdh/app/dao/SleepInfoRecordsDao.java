package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.SleepInfoRecords;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SLEEP_INFO_RECORDS.
*/
public class SleepInfoRecordsDao extends AbstractDao<SleepInfoRecords, Long> {

    public static final String TABLENAME = "SLEEP_INFO_RECORDS";

    /**
     * Properties of entity SleepInfoRecords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sleeprecordid = new Property(1, Integer.class, "sleeprecordid", false, "SLEEPRECORDID");
        public final static Property Airhumidity = new Property(2, Double.class, "airhumidity", false, "AIRHUMIDITY");
        public final static Property Ambienttemperature = new Property(3, Double.class, "ambienttemperature", false, "AMBIENTTEMPERATURE");
        public final static Property Ambientnoise = new Property(4, Double.class, "ambientnoise", false, "AMBIENTNOISE");
        public final static Property Sleepbegin = new Property(5, String.class, "sleepbegin", false, "SLEEPBEGIN");
        public final static Property Sleepover = new Property(6, String.class, "sleepover", false, "SLEEPOVER");
        public final static Property Deepsleeptime = new Property(7, Double.class, "deepsleeptime", false, "DEEPSLEEPTIME");
        public final static Property Shallowsleeptime = new Property(8, Double.class, "shallowsleeptime", false, "SHALLOWSLEEPTIME");
        public final static Property Sleepremarks = new Property(9, String.class, "sleepremarks", false, "SLEEPREMARKS");
        public final static Property Sleeprecorduptime = new Property(10, String.class, "sleeprecorduptime", false, "SLEEPRECORDUPTIME");
        public final static Property Temp_userid = new Property(11, String.class, "temp_userid", false, "TEMP_USERID");
        public final static Property Temp_locationinfoid = new Property(12, Integer.class, "temp_locationinfoid", false, "TEMP_LOCATIONINFOID");
        public final static Property Waketimes = new Property(13, Integer.class, "waketimes", false, "WAKETIMES");
        public final static Property Temp_intelligentdeviceid = new Property(14, Integer.class, "temp_intelligentdeviceid", false, "TEMP_INTELLIGENTDEVICEID");
        public final static Property Intelligentdevicecode = new Property(15, Integer.class, "intelligentdevicecode", false, "INTELLIGENTDEVICECODE");
        public final static Property Sleepuploadflag = new Property(16, Integer.class, "sleepuploadflag", false, "SLEEPUPLOADFLAG");
        public final static Property awaketime = new Property(17, String.class, "awaketime", false, "AWAKETIME");

    };


    public SleepInfoRecordsDao(DaoConfig config) {
        super(config);
    }
    
    public SleepInfoRecordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SLEEP_INFO_RECORDS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'SLEEPRECORDID' INTEGER," + // 1: sleeprecordid
                "'AIRHUMIDITY' REAL," + // 2: airhumidity
                "'AMBIENTTEMPERATURE' REAL," + // 3: ambienttemperature
                "'AMBIENTNOISE' REAL," + // 4: ambientnoise
                "'SLEEPBEGIN' INTEGER," + // 5: sleepbegin
                "'SLEEPOVER' INTEGER," + // 6: sleepover
                "'DEEPSLEEPTIME' REAL," + // 7: deepsleeptime
                "'SHALLOWSLEEPTIME' REAL," + // 8: shallowsleeptime
                "'SLEEPREMARKS' TEXT," + // 9: sleepremarks
                "'SLEEPRECORDUPTIME' INTEGER," + // 10: sleeprecorduptime
                "'TEMP_USERID' INTEGER," + // 11: temp_userid
                "'TEMP_LOCATIONINFOID' INTEGER," + // 12: temp_locationinfoid
                "'WAKETIMES' INTEGER," + // 13: waketimes
                "'TEMP_INTELLIGENTDEVICEID' INTEGER," + // 14: temp_intelligentdeviceid
                "'INTELLIGENTDEVICECODE' INTEGER," +// 15: intelligentdevicecode
                "'SLEEPUPLOADFLAG' INTEGER," +
                "'AWAKETIME' STRING);");

    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SLEEP_INFO_RECORDS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SleepInfoRecords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer sleeprecordid = entity.getSleeprecordid();
        if (sleeprecordid != null) {
            stmt.bindLong(2, sleeprecordid);
        }
 
        Double airhumidity = entity.getAirhumidity();
        if (airhumidity != null) {
            stmt.bindDouble(3, airhumidity);
        }
 
        Double ambienttemperature = entity.getAmbienttemperature();
        if (ambienttemperature != null) {
            stmt.bindDouble(4, ambienttemperature);
        }
 
        Double ambientnoise = entity.getAmbientnoise();
        if (ambientnoise != null) {
            stmt.bindDouble(5, ambientnoise);
        }
 
        String sleepbegin = entity.getSleepbegin();
        if (sleepbegin != null) {
            stmt.bindString(6, sleepbegin);
        }
 
        String sleepover = entity.getSleepover();
        if (sleepover != null) {
            stmt.bindString(7, sleepover);
        }
 
        Double deepsleeptime = entity.getDeepsleeptime();
        if (deepsleeptime != null) {
            stmt.bindDouble(8, deepsleeptime);
        }
 
        Double shallowsleeptime = entity.getShallowsleeptime();
        if (shallowsleeptime != null) {
            stmt.bindDouble(9, shallowsleeptime);
        }
 
        String sleepremarks = entity.getSleepremarks();
        if (sleepremarks != null) {
            stmt.bindString(10, sleepremarks);
        }
 
        String sleeprecorduptime = entity.getSleeprecorduptime();
        if (sleeprecorduptime != null) {
            stmt.bindString(11, sleeprecorduptime);
        }
 
        String temp_userid = entity.getTemp_userid();
        if (temp_userid != null) {
            stmt.bindString(12, temp_userid);
        }
 
        Integer temp_locationinfoid = entity.getTemp_locationinfoid();
        if (temp_locationinfoid != null) {
            stmt.bindLong(13, temp_locationinfoid);
        }
 
        Integer waketimes = entity.getWaketimes();
        if (waketimes != null) {
            stmt.bindLong(14, waketimes);
        }
 
        Integer temp_intelligentdeviceid = entity.getTemp_intelligentdeviceid();
        if (temp_intelligentdeviceid != null) {
            stmt.bindLong(15, temp_intelligentdeviceid);
        }
 
        Integer intelligentdevicecode = entity.getIntelligentdevicecode();
        if (intelligentdevicecode != null) {
            stmt.bindLong(16, intelligentdevicecode);
        }
        Integer sleepuploadflag = entity.getSleepuploadflag();
        if(sleepuploadflag != null){
            stmt.bindLong(17,sleepuploadflag);
        }
        String awaketime = entity.getAwaketime();
        if(awaketime != null){
            stmt.bindString(18,awaketime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SleepInfoRecords readEntity(Cursor cursor, int offset) {
        SleepInfoRecords entity = new SleepInfoRecords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sleeprecordid
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // airhumidity
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // ambienttemperature
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // ambientnoise
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sleepbegin
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sleepover
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // deepsleeptime
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // shallowsleeptime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sleepremarks
            cursor.isNull(offset + 10) ? null :cursor.getString(offset + 10), // sleeprecorduptime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // temp_userid
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // temp_locationinfoid
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // waketimes
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // temp_intelligentdeviceid
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // intelligentdevicecode
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // sleepuploadflag
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // awaketime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SleepInfoRecords entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSleeprecordid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAirhumidity(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setAmbienttemperature(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setAmbientnoise(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setSleepbegin(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSleepover(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeepsleeptime(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setShallowsleeptime(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setSleepremarks(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSleeprecorduptime(cursor.isNull(offset + 10) ? null :cursor.getString(offset + 10));
        entity.setTemp_userid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTemp_locationinfoid(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setWaketimes(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setTemp_intelligentdeviceid(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setIntelligentdevicecode(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setSleepuploadflag(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setAwaketime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SleepInfoRecords entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SleepInfoRecords entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
