package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.SportInfoRecords;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SPORT_INFO_RECORDS.
*/
public class SportInfoRecordsDao extends AbstractDao<SportInfoRecords, Long> {

    public static final String TABLENAME = "SPORT_INFO_RECORDS";

    /**
     * Properties of entity SportInfoRecords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sportrecordid = new Property(1, Integer.class, "sportrecordid", false, "SPORTRECORDID");
        public final static Property Walkstepnumber = new Property(2, Integer.class, "walkstepnumber", false, "WALKSTEPNUMBER");
        public final static Property Runstepnumber = new Property(3, Integer.class, "runstepnumber", false, "RUNSTEPNUMBER");
        public final static Property Walkdistance = new Property(4, Double.class, "walkdistance", false, "WALKDISTANCE");
        public final static Property Rundistance = new Property(5, Double.class, "rundistance", false, "RUNDISTANCE");
        public final static Property Calorieconsumption = new Property(6, Double.class, "calorieconsumption", false, "CALORIECONSUMPTION");
        public final static Property Sportbegintime = new Property(7, String.class, "sportbegintime", false, "SPORTBEGINTIME");
        public final static Property Sportovertime = new Property(8, String.class, "sportovertime", false, "SPORTOVERTIME");
        public final static Property Sportrecorduptime = new Property(9, String.class, "sportrecorduptime", false, "SPORTRECORDUPTIME");
        public final static Property Sportinforemarks = new Property(10, String.class, "sportinforemarks", false, "SPORTINFOREMARKS");
        public final static Property Sportanalysis = new Property(11, String.class, "sportanalysis", false, "SPORTANALYSIS");
        public final static Property Temp_userid = new Property(12, String.class, "temp_userid", false, "TEMP_USERID");
        public final static Property Temp_locationinfoid = new Property(13, Integer.class, "temp_locationinfoid", false, "TEMP_LOCATIONINFOID");
        public final static Property Sport_mode = new Property(14, String.class, "sport_mode", false, "SPORT_MODE");
        public final static Property Temp_intelligentdeviceid = new Property(15, Integer.class, "temp_intelligentdeviceid", false, "TEMP_INTELLIGENTDEVICEID");
        public final static Property Intelligentdevicecode = new Property(16, Integer.class, "intelligentdevicecode", false, "INTELLIGENTDEVICECODE");
        public final static Property Uploadflag = new Property(17, Integer.class, "uploadflag", false, "UPLOADFLAG");
        public final static Property Restingcalorieconsume = new Property(18, Double.class, "restingcalorieconsume", false, "RESTINGCALORIECONSUME");
        public final static Property Movecalorieconsume = new Property(19, Double.class, "movecalorieconsume", false, "MOVECALORIECONSUME");
        public final static Property Crawledfloor = new Property(20, Integer.class, "crawledfloor", false, "CRAWLEDFLOOR");
        public final static Property Fallitems = new Property(21, Integer.class, "fallitems", false, "FALLITEMS");
        public final static Property Activeduration = new Property(22, Double.class, "activeduration", false, "ACTIVEDURATION");
        public final static Property Longestactiveduration = new Property(23, Double.class, "longestactiveduration", false, "LONGESTACTIVEDURATION");
        public final static Property Longestidleduration = new Property(24, Double.class, "longestidleduration", false, "LONGESTIDLEDURATION");
        public final static Property Temp_exerciseid = new Property(25, Integer.class, "temp_exerciseid", false, "TEMP_EXERCISEID");




    };


    public SportInfoRecordsDao(DaoConfig config) {
        super(config);
    }
    
    public SportInfoRecordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SPORT_INFO_RECORDS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'SPORTRECORDID' INTEGER," + // 1: sportrecordid
                "'WALKSTEPNUMBER' INTEGER," + // 2: walkstepnumber
                "'RUNSTEPNUMBER' INTEGER," + // 3: runstepnumber
                "'WALKDISTANCE' REAL," + // 4: walkdistance
                "'RUNDISTANCE' REAL," + // 5: rundistance
                "'CALORIECONSUMPTION' REAL," + // 6: calorieconsumption
                "'SPORTBEGINTIME' INTEGER," + // 7: sportbegintime
                "'SPORTOVERTIME' INTEGER," + // 8: sportovertime
                "'SPORTRECORDUPTIME' INTEGER," + // 9: sportrecorduptime
                "'SPORTINFOREMARKS' TEXT," + // 10: sportinforemarks
                "'SPORTANALYSIS' TEXT," + // 11: sportanalysis
                "'TEMP_USERID' TEXT," + // 12: temp_userid
                "'TEMP_LOCATIONINFOID' INTEGER," + // 13: temp_locationinfoid
                "'SPORT_MODE' TEXT," + // 14: sport_mode
                "'TEMP_INTELLIGENTDEVICEID' INTEGER," + // 15: temp_intelligentdeviceid
                "'INTELLIGENTDEVICECODE' INTEGER,"  +// 16: intelligentdevicecode
                "'UPLOADFLAG' INTEGER," +
                "'RESTINGCALORIECONSUME' REAL," +
                "'MOVECALORIECONSUME' REAL," +
                "'CRAWLEDFLOOR' INTEGER," +
                "'FALLITEMS' INTEGER," +
                "'ACTIVEDURATION' REAL," +
                "'LONGESTACTIVEDURATION' REAL," +
                "'LONGESTIDLEDURATION' REAL," +
                "'TEMP_EXERCISEID' INTEGER);");



    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SPORT_INFO_RECORDS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SportInfoRecords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer sportrecordid = entity.getSportrecordid();
        if (sportrecordid != null) {
            stmt.bindLong(2, sportrecordid);
        }
 
        Integer walkstepnumber = entity.getWalkstepnumber();
        if (walkstepnumber != null) {
            stmt.bindLong(3, walkstepnumber);
        }
 
        Integer runstepnumber = entity.getRunstepnumber();
        if (runstepnumber != null) {
            stmt.bindLong(4, runstepnumber);
        }
 
        Double walkdistance = entity.getWalkdistance();
        if (walkdistance != null) {
            stmt.bindDouble(5, walkdistance);
        }
 
        Double rundistance = entity.getRundistance();
        if (rundistance != null) {
            stmt.bindDouble(6, rundistance);
        }
 
        Double calorieconsumption = entity.getCalorieconsumption();
        if (calorieconsumption != null) {
            stmt.bindDouble(7, calorieconsumption);
        }
 
        String sportbegintime = entity.getSportbegintime();
        if (sportbegintime != null) {
            stmt.bindString(8, sportbegintime);
        }
 
        String sportovertime = entity.getSportovertime();
        if (sportovertime != null) {
            stmt.bindString(9, sportovertime);
        }
 
        String sportrecorduptime = entity.getSportrecorduptime();
        if (sportrecorduptime != null) {
            stmt.bindString(10, sportrecorduptime);
        }
 
        String sportinforemarks = entity.getSportinforemarks();
        if (sportinforemarks != null) {
            stmt.bindString(11, sportinforemarks);
        }
 
        String sportanalysis = entity.getSportanalysis();
        if (sportanalysis != null) {
            stmt.bindString(12, sportanalysis);
        }
 
        String temp_userid = entity.getTemp_userid();
        if (temp_userid != null) {
            stmt.bindString(13, temp_userid);
        }
 
        Integer temp_locationinfoid = entity.getTemp_locationinfoid();
        if (temp_locationinfoid != null) {
            stmt.bindLong(14, temp_locationinfoid);
        }
 
        String sport_mode = entity.getSport_mode();
        if (sport_mode != null) {
            stmt.bindString(15, sport_mode);
        }
 
        Integer temp_intelligentdeviceid = entity.getTemp_intelligentdeviceid();
        if (temp_intelligentdeviceid != null) {
            stmt.bindLong(16, temp_intelligentdeviceid);
        }
 
        Integer intelligentdevicecode = entity.getIntelligentdevicecode();
        if (intelligentdevicecode != null) {
            stmt.bindLong(17, intelligentdevicecode);
        }
        Integer uploadflag = entity.getUploadflag();
        if(uploadflag != null){
            stmt.bindLong(18,uploadflag);
        }
        Double restingcalorieconsume =entity.getRestingcalorieconsume();
        if(restingcalorieconsume != null){
            stmt.bindDouble(19,restingcalorieconsume);
        }
        Double movecalorieconsume = entity.getMovecalorieconsume();
        if(movecalorieconsume != null){
            stmt.bindDouble(20,movecalorieconsume);
        }
        Integer crawledfloor = entity.getCrawledfloor();
        if(crawledfloor != null){
            stmt.bindLong(21,crawledfloor);
        }
        Integer fallitems = entity.getFallitems();
        if(fallitems != null){
            stmt.bindLong(22,fallitems);
        }
        Double activeduration = entity.getActiveduration();
        if(activeduration != null){
            stmt.bindDouble(23,activeduration);
        }
        Double longestactiveduration = entity.getLongestactiveduration();
        if(longestactiveduration != null){
            stmt.bindDouble(24,longestactiveduration);
        }
        Double longestidleduration = entity.getLongestidleduration();
        if(longestidleduration != null){
            stmt.bindDouble(25,longestidleduration);
        }
        Integer temp_exerciseid = entity.getTemp_exerciseid();
        if(temp_exerciseid != null){
            stmt.bindLong(26,temp_exerciseid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SportInfoRecords readEntity(Cursor cursor, int offset) {
        SportInfoRecords entity = new SportInfoRecords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sportrecordid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // walkstepnumber
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // runstepnumber
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // walkdistance
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // rundistance
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // calorieconsumption
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sportbegintime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sportovertime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sportrecorduptime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sportinforemarks
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sportanalysis
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // temp_userid
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // temp_locationinfoid
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 14), // temp_intelligentdeviceid
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 15), // sport_mode
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16),// intelligentdevicecode
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17),
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18),
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19),
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20),
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21),
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22),
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23),
            cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24),
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25)
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SportInfoRecords entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSportrecordid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setWalkstepnumber(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRunstepnumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setWalkdistance(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setRundistance(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setCalorieconsumption(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setSportbegintime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSportovertime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSportrecorduptime(cursor.isNull(offset + 9) ? null :cursor.getString(offset + 9));
        entity.setSportinforemarks(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSportanalysis(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTemp_userid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTemp_locationinfoid(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setSport_mode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTemp_intelligentdeviceid(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setIntelligentdevicecode(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setUploadflag(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setRestingcalorieconsume(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setMovecalorieconsume(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setCrawledfloor(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setFallitems(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setActiveduration(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setLongestactiveduration(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setLongestidleduration(cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24));
        entity.setTemp_exerciseid(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));

     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SportInfoRecords entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SportInfoRecords entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
