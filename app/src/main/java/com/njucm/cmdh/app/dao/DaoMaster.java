package com.njucm.cmdh.app.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 3): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 3;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        HealthKnowledgeTypeDao.createTable(db, ifNotExists);
        TCMHealthknowledgeDao.createTable(db, ifNotExists);
        PhysiqueInfoDao.createTable(db, ifNotExists);
        IdentifyChoicesDao.createTable(db, ifNotExists);
        IdentificationIssuessDao.createTable(db, ifNotExists);
        UserAnswerRecordsDao.createTable(db, ifNotExists);
        ConsitituteIdentifyResultDao.createTable(db, ifNotExists);
        UserKnowledgeMappDao.createTable(db, ifNotExists);
        HealthSuggestionsMappDao.createTable(db, ifNotExists);
        HealthSuggTypeDao.createTable(db, ifNotExists);
        HealthSuggestionsDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        UserExerciseFeatureDao.createTable(db, ifNotExists);
        UserSleepFeatureDao.createTable(db, ifNotExists);
        FoodFeatureDao.createTable(db, ifNotExists);
        DietaryRecordsDao.createTable(db, ifNotExists);
        EatingAnalysisDao.createTable(db, ifNotExists);
        SportInfoRecordsDao.createTable(db, ifNotExists);
        SleepInfoRecordsDao.createTable(db, ifNotExists);
        EatingPreferRecordsDao.createTable(db, ifNotExists);
        SleepPreferRecordsDao.createTable(db, ifNotExists);
        ExercisePreferRecordsDao.createTable(db, ifNotExists);
        AverageAmountStdDao.createTable(db, ifNotExists);
        UserHealthknowageDao.createTable(db, ifNotExists);
        HealthSuggestionCombileSimplifyDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        HealthKnowledgeTypeDao.dropTable(db, ifExists);
        TCMHealthknowledgeDao.dropTable(db, ifExists);
        PhysiqueInfoDao.dropTable(db, ifExists);
        IdentifyChoicesDao.dropTable(db, ifExists);
        IdentificationIssuessDao.dropTable(db, ifExists);
        UserAnswerRecordsDao.dropTable(db, ifExists);
        ConsitituteIdentifyResultDao.dropTable(db, ifExists);
        UserKnowledgeMappDao.dropTable(db, ifExists);
        HealthSuggestionsMappDao.dropTable(db, ifExists);
        HealthSuggTypeDao.dropTable(db, ifExists);
        HealthSuggestionsDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        UserExerciseFeatureDao.dropTable(db, ifExists);
        UserSleepFeatureDao.dropTable(db, ifExists);
        FoodFeatureDao.dropTable(db, ifExists);
        DietaryRecordsDao.dropTable(db, ifExists);
        EatingAnalysisDao.dropTable(db, ifExists);
        SportInfoRecordsDao.dropTable(db, ifExists);
        SleepInfoRecordsDao.dropTable(db, ifExists);
        EatingPreferRecordsDao.dropTable(db, ifExists);
        SleepPreferRecordsDao.dropTable(db, ifExists);
        ExercisePreferRecordsDao.dropTable(db, ifExists);
        AverageAmountStdDao.dropTable(db, ifExists);
        UserHealthknowageDao.dropTable(db, ifExists);
        HealthSuggestionCombileSimplifyDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(HealthKnowledgeTypeDao.class);
        registerDaoClass(TCMHealthknowledgeDao.class);
        registerDaoClass(PhysiqueInfoDao.class);
        registerDaoClass(IdentifyChoicesDao.class);
        registerDaoClass(IdentificationIssuessDao.class);
        registerDaoClass(UserAnswerRecordsDao.class);
        registerDaoClass(ConsitituteIdentifyResultDao.class);
        registerDaoClass(UserKnowledgeMappDao.class);
        registerDaoClass(HealthSuggestionsMappDao.class);
        registerDaoClass(HealthSuggTypeDao.class);
        registerDaoClass(HealthSuggestionsDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(UserExerciseFeatureDao.class);
        registerDaoClass(UserSleepFeatureDao.class);
        registerDaoClass(FoodFeatureDao.class);
        registerDaoClass(DietaryRecordsDao.class);
        registerDaoClass(EatingAnalysisDao.class);
        registerDaoClass(SportInfoRecordsDao.class);
        registerDaoClass(SleepInfoRecordsDao.class);
        registerDaoClass(EatingPreferRecordsDao.class);
        registerDaoClass(SleepPreferRecordsDao.class);
        registerDaoClass(ExercisePreferRecordsDao.class);
        registerDaoClass(AverageAmountStdDao.class);
        registerDaoClass(UserHealthknowageDao.class);
        registerDaoClass(HealthSuggestionCombileSimplifyDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
