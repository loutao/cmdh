package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.ExercisePreferRecords;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EXERCISE_PREFER_RECORDS.
*/
public class ExercisePreferRecordsDao extends AbstractDao<ExercisePreferRecords, Long> {

    public static final String TABLENAME = "EXERCISE_PREFER_RECORDS";

    /**
     * Properties of entity ExercisePreferRecords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Exercisepreferenceid = new Property(1, Integer.class, "exercisepreferenceid", false, "EXERCISEPREFERENCEID");
        public final static Property Exercisetype = new Property(2, String.class, "exercisetype", false, "EXERCISETYPE");
        public final static Property Exercisename = new Property(3, String.class, "exercisename", false, "EXERCISENAME");
        public final static Property Exercisedescribe = new Property(4, String.class, "exercisedescribe", false, "EXERCISEDESCRIBE");
        public final static Property Temp_exerciseid = new Property(5, Integer.class, "temp_exerciseid", false, "TEMP_EXERCISEID");
        public final static Property Temp_userid = new Property(6, Integer.class, "temp_userid", false, "TEMP_USERID");
        public final static Property Temp_locationinfoid = new Property(7, Integer.class, "temp_locationinfoid", false, "TEMP_LOCATIONINFOID");
    };


    public ExercisePreferRecordsDao(DaoConfig config) {
        super(config);
    }
    
    public ExercisePreferRecordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EXERCISE_PREFER_RECORDS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'EXERCISEPREFERENCEID' INTEGER," + // 1: exercisepreferenceid
                "'EXERCISETYPE' TEXT," + // 2: exercisetype
                "'EXERCISENAME' TEXT," + // 3: exercisename
                "'EXERCISEDESCRIBE' TEXT," + // 4: exercisedescribe
                "'TEMP_EXERCISEID' INTEGER," + // 5: temp_exerciseid
                "'TEMP_USERID' INTEGER," + // 6: temp_userid
                "'TEMP_LOCATIONINFOID' INTEGER);"); // 7: temp_locationinfoid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXERCISE_PREFER_RECORDS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExercisePreferRecords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer exercisepreferenceid = entity.getExercisepreferenceid();
        if (exercisepreferenceid != null) {
            stmt.bindLong(2, exercisepreferenceid);
        }
 
        String exercisetype = entity.getExercisetype();
        if (exercisetype != null) {
            stmt.bindString(3, exercisetype);
        }
 
        String exercisename = entity.getExercisename();
        if (exercisename != null) {
            stmt.bindString(4, exercisename);
        }
 
        String exercisedescribe = entity.getExercisedescribe();
        if (exercisedescribe != null) {
            stmt.bindString(5, exercisedescribe);
        }
 
        Integer temp_exerciseid = entity.getTemp_exerciseid();
        if (temp_exerciseid != null) {
            stmt.bindLong(6, temp_exerciseid);
        }
 
        Integer temp_userid = entity.getTemp_userid();
        if (temp_userid != null) {
            stmt.bindLong(7, temp_userid);
        }
 
        Integer temp_locationinfoid = entity.getTemp_locationinfoid();
        if (temp_locationinfoid != null) {
            stmt.bindLong(8, temp_locationinfoid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExercisePreferRecords readEntity(Cursor cursor, int offset) {
        ExercisePreferRecords entity = new ExercisePreferRecords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // exercisepreferenceid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // exercisetype
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // exercisename
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // exercisedescribe
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // temp_exerciseid
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // temp_userid
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // temp_locationinfoid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExercisePreferRecords entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExercisepreferenceid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setExercisetype(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExercisename(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExercisedescribe(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTemp_exerciseid(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTemp_userid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTemp_locationinfoid(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ExercisePreferRecords entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ExercisePreferRecords entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
