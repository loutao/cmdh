package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.TCMHealthknowledge;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TCMHEALTHKNOWLEDGE.
*/
public class TCMHealthknowledgeDao extends AbstractDao<TCMHealthknowledge, Long> {

    public static final String TABLENAME = "TCMHEALTHKNOWLEDGE";

    /**
     * Properties of entity Tcmhealthknowledge.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Healthknowledgeid = new Property(1, Integer.class, "healthknowledgeid", false, "HEALTHKNOWLEDGEID");
        public final static Property Healthknowledgetitle = new Property(2, String.class, "healthknowledgetitle", false, "HEALTHKNOWLEDGETITLE");
        public final static Property Healthknowledgecontent = new Property(3, String.class, "healthknowledgecontent", false, "HEALTHKNOWLEDGECONTENT");
        public final static Property Exersuggtime = new Property(4, java.util.Date.class, "exersuggtime", false, "EXERSUGGTIME");
        public final static Property Healthknowledgecode = new Property(5, Integer.class, "healthknowledgecode", false, "HEALTHKNOWLEDGECODE");
        public final static Property Temp_healthknowltypeid = new Property(6, Integer.class, "temp_healthknowltypeid", false, "TEMP_HEALTHKNOWLTYPEID");
        public final static Property Healthknowledgeremarks = new Property(7, String.class, "healthknowledgeremarks", false, "HEALTHKNOWLEDGEREMARKS");
        public final static Property Healthknowledgeflag = new Property(8, Integer.class, "healthknowledgeflag", false, "HEALTHKNOWLEDGEFLAG");
    };


    public TCMHealthknowledgeDao(DaoConfig config) {
        super(config);
    }
    
    public TCMHealthknowledgeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TCMHEALTHKNOWLEDGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'HEALTHKNOWLEDGEID' INTEGER," + // 1: healthknowledgeid
                "'HEALTHKNOWLEDGETITLE' TEXT," + // 2: healthknowledgetitle
                "'HEALTHKNOWLEDGECONTENT' TEXT," + // 3: healthknowledgecontent
                "'EXERSUGGTIME' INTEGER," + // 4: exersuggtime
                "'HEALTHKNOWLEDGECODE' INTEGER," + // 5: healthknowledgecode
                "'TEMP_HEALTHKNOWLTYPEID' INTEGER," + // 6: temp_healthknowltypeid
                "'HEALTHKNOWLEDGEREMARKS' TEXT);"+ // 7: healthknowledgeremarks
                "'HEALTHKNOWLEDGEFLAG' INTEGER);"); // 8: healthknowledgeflag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TCMHEALTHKNOWLEDGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TCMHealthknowledge entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer healthknowledgeid = entity.getHealthknowledgeid();
        if (healthknowledgeid != null) {
            stmt.bindLong(2, healthknowledgeid);
        }
 
        String healthknowledgetitle = entity.getHealthknowledgetitle();
        if (healthknowledgetitle != null) {
            stmt.bindString(3, healthknowledgetitle);
        }
 
        String healthknowledgecontent = entity.getHealthknowledgecontent();
        if (healthknowledgecontent != null) {
            stmt.bindString(4, healthknowledgecontent);
        }
 
        java.util.Date exersuggtime = entity.getExersuggtime();
        if (exersuggtime != null) {
            stmt.bindLong(5, exersuggtime.getTime());
        }
 
        Integer healthknowledgecode = entity.getHealthknowledgecode();
        if (healthknowledgecode != null) {
            stmt.bindLong(6, healthknowledgecode);
        }
 
        Integer temp_healthknowltypeid = entity.getTemp_healthknowltypeid();
        if (temp_healthknowltypeid != null) {
            stmt.bindLong(7, temp_healthknowltypeid);
        }
 
        String healthknowledgeremarks = entity.getHealthknowledgeremarks();
        if (healthknowledgeremarks != null) {
            stmt.bindString(8, healthknowledgeremarks);
        }
        Integer healthknowledgeflag = entity.getHealthknowledgeflag();
        if (healthknowledgeflag != null) {
            stmt.bindLong(9, healthknowledgeflag);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TCMHealthknowledge readEntity(Cursor cursor, int offset) {
        TCMHealthknowledge entity = new TCMHealthknowledge( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // healthknowledgeid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // healthknowledgetitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // healthknowledgecontent
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // exersuggtime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // healthknowledgecode
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // temp_healthknowltypeid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // healthknowledgeremarks
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // healthknowledgeflag

        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TCMHealthknowledge entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHealthknowledgeid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setHealthknowledgetitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHealthknowledgecontent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExersuggtime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setHealthknowledgecode(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTemp_healthknowltypeid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHealthknowledgeremarks(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TCMHealthknowledge entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TCMHealthknowledge entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
