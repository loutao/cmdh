package com.njucm.cmdh.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.njucm.cmdh.app.domain.SleepPreferRecords;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SLEEP_PREFER_RECORDS.
*/
public class SleepPreferRecordsDao extends AbstractDao<SleepPreferRecords, Long> {

    public static final String TABLENAME = "SLEEP_PREFER_RECORDS";

    /**
     * Properties of entity SleepPreferRecords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sleeppreferid = new Property(1, Integer.class, "sleeppreferid", false, "SLEEPPREFERID");
        public final static Property Prefersleepbeginat = new Property(2, java.util.Date.class, "prefersleepbeginat", false, "PREFERSLEEPBEGINAT");
        public final static Property Prefersleepoverat = new Property(3, java.util.Date.class, "prefersleepoverat", false, "PREFERSLEEPOVERAT");
        public final static Property Temp_locationinfoid = new Property(4, Integer.class, "temp_locationinfoid", false, "TEMP_LOCATIONINFOID");
        public final static Property Temp_userid = new Property(5, Integer.class, "temp_userid", false, "TEMP_USERID");
    };


    public SleepPreferRecordsDao(DaoConfig config) {
        super(config);
    }
    
    public SleepPreferRecordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SLEEP_PREFER_RECORDS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'SLEEPPREFERID' INTEGER," + // 1: sleeppreferid
                "'PREFERSLEEPBEGINAT' INTEGER," + // 2: prefersleepbeginat
                "'PREFERSLEEPOVERAT' INTEGER," + // 3: prefersleepoverat
                "'TEMP_LOCATIONINFOID' INTEGER," + // 4: temp_locationinfoid
                "'TEMP_USERID' INTEGER);"); // 5: temp_userid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SLEEP_PREFER_RECORDS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SleepPreferRecords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer sleeppreferid = entity.getSleeppreferid();
        if (sleeppreferid != null) {
            stmt.bindLong(2, sleeppreferid);
        }
 
        java.util.Date prefersleepbeginat = entity.getPrefersleepbeginat();
        if (prefersleepbeginat != null) {
            stmt.bindLong(3, prefersleepbeginat.getTime());
        }
 
        java.util.Date prefersleepoverat = entity.getPrefersleepoverat();
        if (prefersleepoverat != null) {
            stmt.bindLong(4, prefersleepoverat.getTime());
        }
 
        Integer temp_locationinfoid = entity.getTemp_locationinfoid();
        if (temp_locationinfoid != null) {
            stmt.bindLong(5, temp_locationinfoid);
        }
 
        Integer temp_userid = entity.getTemp_userid();
        if (temp_userid != null) {
            stmt.bindLong(6, temp_userid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SleepPreferRecords readEntity(Cursor cursor, int offset) {
        SleepPreferRecords entity = new SleepPreferRecords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sleeppreferid
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // prefersleepbeginat
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // prefersleepoverat
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // temp_locationinfoid
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // temp_userid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SleepPreferRecords entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSleeppreferid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPrefersleepbeginat(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setPrefersleepoverat(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setTemp_locationinfoid(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTemp_userid(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SleepPreferRecords entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SleepPreferRecords entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
